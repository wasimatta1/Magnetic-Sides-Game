//wasim atta 1200920
// musab masalmah  1200078
import java.util.Arrays;
import java.util.Objects;
import java.util.Scanner;

public class Main {
    /* static String [][] game =   game= new String[][]{   //game for test
               {"■", "■", "□", "■", "□", "□", "□", "□"},
               {"■", "■", "□", "■", "□", "□", "■", "■"},
               {"□", "□", "0", "■", "■", "□", "■", "□"},
               {"□", "■", "■", "0", "□", "□", "□", "■"},
               {"□", "□", "□", "0", "■", "■", "■", "□"},
               {"■", "■", "■", "□", "■", "□", "□", "■"},
               {"□", "□", "■", "0", "■", "■", "□", "■"},
               {"□", "□", "■", "0", "■", "0", "□", "■"}};*/
    static String [][] game =   game= new String[][]{   //initalize board values
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0"}};
    public static void print(String [][] data ){ //method to print the board
        System.out.println("   A B C D E F G H");
        for (int i =0;i< data.length;i++) {
            System.out.print(i+1 + "  ");
            for (int j = 0; j < data[i].length; j++){
                System.out.print(data[i][j] + " ");
            }
            System.out.print(" "+ (i+1) + "   ");
            System.out.println();
        }
        System.out.println("   A B C D E F G H");
    }
    public static String check(String [][] data ,int number1 ,int number2){
        number1--;   //index row
        String ch="0";  //vlues in it we will put the win or game over values and if it still zero the game is iver
        for(int i =0;i< data.length;i++){
            for(int j=0;j<data[i].length;j++) {
                if (Objects.equals(data[i][j], "0")) {
                    ch = "3";   //if there is any place = 0 so no game over yet
                    break;
                }
            }
        }
        String value = data[number1][number2];
        int counter =0;
        for(int i=0;i<data[number1].length;i++) {
            if(Objects.equals(data[number1][i], value)) {
                counter++;
                if (counter == 5) {
                    ch = value;    //he win in 5 sequance colums
                    return ch;
                }
            }else {
                counter=0;
            }
        }
        counter=0;
        for(int i=0;i<data.length;i++) {
            if(Objects.equals(data[i][number2], value)) {
                counter++;
                if (counter == 5) {
                    ch = value;
                    return ch;  //he win 5 sequance rows
                }
            }else {
                counter=0;
            }
        }
        int num1=number1,num2=number2;
        while (true){
            if (num1==0 || num2 == 0)
                break;
            num1--;
            num2--;
        }
        counter=0;
        for (int i=0 ; i<8 ;i++){
            if(Objects.equals(data[num1][num2], value)) {
                counter++;
                if (counter == 5) {
                    ch = value;
                    return ch;         //check win to diagonal
                }
            }else {
                counter=0;
            }
            num1++;
            num2++;
            if(num1==8 || num2 == 8)
                break;
        }
        num1=number1;
        num2=number2;
        while (true){
            if (num1==7|| num2 == 0)
                break;
            num1++;
            num2--;
        }
        counter=0;
        for (int i=0 ; i<8 ;i++){
            if(Objects.equals(data[num1][num2], value)) {
                counter++;
                if (counter == 5) {
                    ch = value;
                    return ch;   //check win to diagonal
                }
            }else {
                counter=0;
            }
            num1--;
            num2++;
            if(num1==-1 || num2 == 8)
                break;
        }


        return ch;
    }
    public static String [][] insert  (String [][] data , String place , String value){
        int indexcheck=0;
        String letter;
        int number1;
        letter = place.substring(0, 1);  //get letter pace value
        number1 = Integer.parseInt(place.substring(1));
        int number2;
        switch (letter) {   //convert the letter to index number
            case "A", "a" -> number2 = 0;
            case "B", "b" -> number2 = 1;
            case "C", "c" -> number2 = 2;
            case "D", "d" -> number2 = 3;
            case "E", "e" -> number2 = 4;
            case "F", "f" -> number2 = 5;
            case "G", "g" -> number2 = 6;
            case "H", "h" -> number2 = 7;
            default -> {
                System.out.println("error place");
                return data;
            }
        }
        if(!Objects.equals(data[number1 - 1][number2], "0")){
            System.out.println("Error place please select other  place");
            return data;
        }
        String check1;
        if(number2 == 0 ){   //if it in first colum you can put it
            indexcheck=1;

        }else if (number2 == 7){     //if it in last colum you can put it
            indexcheck=1;
        }
        else{
            if (!Objects.equals(data[number1 - 1][number2 + 1], "0") || !Objects.equals(data[number1 - 1][number2 - 1], "0")){
                indexcheck=1;
            }  //if he the place null he can play

        }
        if (indexcheck == 1 ){ //if he can play
            if(Objects.equals(value, "■")) {
                data[number1 - 1][number2] = "■";  //put the value in its place
                check1= check(data,number1,number2);  //check win
                if (Objects.equals(check1, "0")){
                    print(data);
                    System.out.println("The game is over");
                    System.exit(0);
                }else if(Objects.equals(check1, "■")){
                    print(data);
                    System.out.println(" white is win");
                    System.exit(0);
                }else if(Objects.equals(check1, "□")){
                    print(data);
                    System.out.println(" black is win");
                    System.exit(0);
                }


                return data;
            }else {
                data[number1 - 1][number2] = "□";
                check1= check(data,number1,number2);
                if (Objects.equals(check1, "0")){
                    print(data);
                    System.out.println("The game is over");
                    System.exit(0);
                }else if(Objects.equals(check1, "■")){
                    print(data);
                    System.out.println(" white is win");
                    System.exit(0);
                }else if(Objects.equals(check1, "□")){
                    print(data);
                    System.out.println(" black is win");
                    System.exit(0);
                }
                return data;
            }
        }
        System.out.println("Error place please select other  place ");
        return data;

    }
    public static int getvalue(String[][] matrix,String turn) {
        int maxSequence = 0;
        int rows = matrix.length;
        int cols = matrix[0].length;


        for (int row = 0; row < rows; row++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0;
            for (int col = 0; col < cols; col++) { //calculate the sequance of the same turn on colums
                if (Objects.equals(matrix[row][col], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=col;  //get the index of the first insequance
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10; //return win
                } else if (Objects.equals(matrix[row][col], "0")){ //
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence); //get max value between it
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) { //check if it in the same sequance
                        if( r!=0 && matrix[row][r-1].equals("0")) //check if it not in the first row and it posible move
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }
            }
            if( r!=0 && matrix[row][r-1].equals("0")) //check if it not in the first row and it posible move
                maxSequence = Math.max(maxSequence, currentSequence);
        }


        // Check columns as the checks above
        for (int col = 0; col < cols; col++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0;
            for (int row = 0; row < rows; row++) {
                if (Objects.equals(matrix[row][col], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=row;
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10;
                } else if (Objects.equals(matrix[row][col], "0")){
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) {
                        if( r!=0 && matrix[r-1][col].equals("0"))
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }
            }
            if( r!=0 && matrix[r-1][col].equals("0"))
                maxSequence = Math.max(maxSequence, currentSequence);
        }



        //check diagonal as the ckecks above
        for (int k = 4; k < rows; k++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0,c=0;
            for (int i = k, j = 0; i >= 0 && j < cols; i--, j++) {
                if (Objects.equals(matrix[i][j], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=i;
                            c=j;
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10;
                } else if (Objects.equals(matrix[i][j], "0")){
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) {
                        if( r!=7 && c!=0 &&  matrix[r+1][c-1].equals("0"))
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }
            }
            if( r!=7 && c!=0 &&  matrix[r+1][c-1].equals("0"))
                maxSequence = Math.max(maxSequence, currentSequence);
        }
        
        // Traverse the lower right as the check above
        for (int k = 1; k < cols-4; k++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0,c=0;
            for (int i = rows - 1, j = k; i >= 0 && j < cols; i--, j++) {
                if (Objects.equals(matrix[i][j], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=i;
                            c=j;
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10;
                } else if (Objects.equals(matrix[i][j], "0")){
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) {
                        if( r!=7 && c!=0 &&  matrix[r+1][c-1].equals("0"))
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }
            }
            if( r!=7 && c!=0 &&  matrix[r+1][c-1].equals("0"))
                maxSequence = Math.max(maxSequence, currentSequence);
        }

        //check the diagonal as check above
        for (int k = 0; k < cols-4; k++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0,c=0;
            for (int i = 0, j = k; i < rows && j < cols; i++, j++) {
                if (Objects.equals(matrix[i][j], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=i;
                            c=j;
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10;
                } else if (Objects.equals(matrix[i][j], "0")){
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) {
                        if( r!=0 && c!=0 &&  matrix[r-1][c-1].equals("0"))
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }
            }
            if( r!=0 && c!=0 &&  matrix[r-1][c-1].equals("0"))
                maxSequence = Math.max(maxSequence, currentSequence);
        }




        // Traverse the lower left check the diagonal as check above
        for (int k = 1; k < rows-4; k++) {
            int currentSequence = 0;
            boolean isInSequence = false;
            int first =0 , r=0,c=0;
            for (int i = k, j = 0; i < rows && j < cols; i++, j++) {
                if (Objects.equals(matrix[i][j], turn)) {
                    if (!isInSequence) {
                        if(first==0) {
                            first = 1;
                            r=i;
                            c=j;
                        }
                        isInSequence = true;
                    }
                    currentSequence++;
                    if(currentSequence == 5 )
                        return 10;
                } else if (Objects.equals(matrix[i][j], "0")){
                    if (isInSequence) {
                        maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }
                }else{
                    if (isInSequence) {
                        if( r!=0 && c!=0 &&  matrix[r-1][c-1].equals("0"))
                            maxSequence = Math.max(maxSequence, currentSequence);
                        currentSequence = 0;
                        first = 0;
                        isInSequence = false;
                    }

                }

            }
            if( r!=0 && c!=0 &&  matrix[r-1][c-1].equals("0"))
                maxSequence = Math.max(maxSequence, currentSequence);
        }


        return maxSequence;
    }
    public static int value (String [][]data ,int num1, int num2 ,String turn,boolean who ) {
        String ch = check(data,num1+1,num2);
        int result=1;
        int before =0,after=0,before1 =0,after1=0;
        String turn2;
        if(Objects.equals(turn,"■")){
            turn2="□";
        }else{
            turn2="■";
        }



        if(!who) {   //if the other turn
            if (Objects.equals(ch, "0")) {
                result = 0;
            } else if (Objects.equals(ch, turn)) { //check who win and put high value if the other will win
                result = 10;
            } else if (Objects.equals(ch, turn2)) {
                result = -10;
            } else {
                after = getvalue(data, turn);  //get the next move vlaue of me
                after1 = getvalue(data, turn2); //get the next move vlaue of the other
                data[num1][num2] = "0";
                before = getvalue(data, turn);  //get the cuurent move of me
                before1 = getvalue(data, turn2);   //get the cuurent move of the other
                data[num1][num2] = turn;
                if ( before1==4 && after1<4 ) {   //if he will when paly this move
                    return 9;
                }
                else if (before < after && before1 > after1) {  //if i paly o good move to me and not good move to the other put 8
                    return 8;
                }
                else if (before < after && before1 == after1){//if i paly o good move to me put 8
                    return 5;
                }
                else if (before == after && before1 == after1) { //if i paly a move not good put -5
                    return -5;
                }
                else if (before == after && before1 > after1) {  //if i lose the other put 2
                    return 2;
                }

            }

        }else{ //the same of the above put to the other plauer
            if (Objects.equals(ch, "0")) {

                result = 0;

            } else if (Objects.equals(ch, turn)) {
                result = 10;

            } else if (Objects.equals(ch, turn2)) {
                result = -10;
            } else {
                after = getvalue(data, turn);
                after1 = getvalue(data, turn2);
                data[num1][num2] = "0";
                before = getvalue(data, turn);
                before1 = getvalue(data, turn2);
                data[num1][num2] = turn2;
                if ( before == 4 && after<4 ) {
                    return -9;
                } else if (before1 < after1 && before > after) {
                    return -8;
                } else if (before1 < after1 && before == after) {
                    return -5;
                } else if (before1 == after1 && before == after) {
                    return 5;
                } else if (before1 == after1 && before > after) {
                    return -2;
                }

            }
        }

        return result;


    }
    public static boolean istrue(String [][]data, int num1 , int num2) {

        //check if i can play this move

        if(!Objects.equals(data[num1][num2], "0")){
            return false;
        }
        if(num2 == 0 ){
            return true;

        }else if (num2 == 7){
            return true;
        }
        else{
            if (!Objects.equals(data[num1][num2 + 1], "0") || !Objects.equals(data[num1][num2 - 1], "0")){
                return true;
            }
        }
        return false;


    }
    public static int minimax(String [][]data ,int depth , boolean ismax , boolean first , String turn ,int num1 ,int num2 ) {
        String turn2;  //put turns values
        if(Objects.equals(turn, "■")){
            turn2="□";
        }else {
            turn2="■";
        }
        if(!first) {  //if it will not play first
            int result = value(data , num1 ,num2 ,turn,ismax);  //get the huristc value
            if (result == 10 ||result == -10 ||result == 0 || depth ==0) {
                return result ;
            }
        }
        if(ismax) { //if its first node in tree
            int fscore = -10;
            int number1 =5, number2=0;
            for(int i = 0; i < 8; i++) {
                for(int j = 0; j < 8; j++) {

                    if(istrue(data,i,j)) { //if its possible move
                        data[i][j] = turn;
                        int score = minimax(data ,depth-1 , false ,false ,turn , i, j ); //do the minimax
                        data[i][j] = "0";
                        if(score > fscore ) { //if the new score greter put it
                            fscore = score;
                            number1 = i;
                            number2 = j;
                        }
                        if(first) {
                            String letter="";
                            switch (j) {
                                case 0 -> letter = "A";
                                case 1-> letter  = "B";
                                case 2 -> letter = "C";
                                case 3 -> letter = "D";
                                case 4 -> letter = "E";
                                case 5 -> letter = "F";
                                case 6 -> letter = "G";
                                case 7 -> letter = "H";
                            }

                            System.out.println(score + "\t" + letter + "\t" + (i + 1) + "\t");

                        }
                    }
                }
            }
            if(first) { //if the other turn print the menu and check who win
                String letter="";
                switch (number2) {
                    case 0 -> letter = "A";
                    case 1-> letter  = "B";
                    case 2 -> letter = "C";
                    case 3 -> letter = "D";
                    case 4 -> letter = "E";
                    case 5 -> letter = "F";
                    case 6 -> letter = "G";
                    case 7 -> letter = "H";
                }
                game[number1][number2] = turn;
                System.out.println("played"+ "\t"+letter + "\t"+(number1+1) + "\t");
                String ch = check(data,number1+1,number2);
                if (Objects.equals(ch, "0")){
                    print(data);
                    System.out.println("The game is over");
                    System.exit(0);
                }else if(Objects.equals(ch, "■")){
                    print(data);
                    System.out.println(" white is win");
                    System.exit(0);
                }else if(Objects.equals(ch, "□")){
                    print(data);
                    System.out.println(" black is win");
                    System.exit(0);
                }
            }
            return fscore;
        }
        if(!ismax) { //do the minimax if its not the first node of tree
            int fscore = 10;
            int number1 =0, number2=0;
            for(int i = 0; i < 8; i++) {
                for(int j = 0; j < 8; j++) {
                    if(istrue(data,i,j)) {
                        data[i][j] = turn2;
                        int score = minimax(data ,depth-1 , true ,false ,turn , i, j );
                        data[i][j] = "0";
                        if(score < fscore ) {
                            fscore = score;
                            number1 = i;
                            number2 = j;
                        }
                    }
                }
            }

            return fscore;
        }
        return 50;
    }
    public static void main(String[] args) {
        String [][] data = new String [8][8];   // declare  bord for manual vs manual
        String [][] temp1 = new String [8][8];  // declare  temp bord for check  turn for which player
        String [][] temp2 = new String [8][8];

        Scanner scanner = new Scanner(System.in);
        for (int i =0;i< data.length;i++)
            for(int j=0 ;j<data[i].length;j++) {
                data[i][j] = "0";

            }
        System.out.println("the game is begin");



        String value ;// declare  the color of player  in value variable
        String place; // declare where user enter the place
        temp1[0][0]="5";
        temp2[0][0]="5";
        System.out.println("\n select game mode :\n" +
                "1. manual entry for both ■’s moves and □’s moves \n" +
                "2. manual entry for □'s moves & automatic moves for ■'\n" +
                "3. manual entry for ■’s moves & automatic moves for □’\n");
        int x = scanner.nextInt();
        if(x==1) {
            print(data);
            while (true) { //if he enter 1 we will get values from user and just put it in board and check win
                if (!Arrays.deepEquals(temp2, data)) {
                    System.out.println("black turn");
                    value = "□";
                    place = scanner.next();
                    for (int i = 0; i < data.length; i++) {
                        temp1[i] = Arrays.copyOf(data[i], data[i].length);
                    }
                    data = insert(data, place, value);
                    print(data);
                }
                if (!Arrays.deepEquals(temp1, data)) {
                    System.out.println("White turn");
                    value = "■";
                    place = scanner.next();
                    for (int i = 0; i < data.length; i++) {
                        temp2[i] = Arrays.copyOf(data[i], data[i].length);
                    }
                    data = insert(data, place, value);
                    print(data);
                }
            }
        }else if(x==2){  //if he enter 2 we will get values from user black and values fron AI white put it in board and check win
            int f;
            while(true) {
                System.out.println("black turn");
                value = "□";
                print(game);
                place = scanner.next();
                for (int i = 0; i < game.length; i++) {
                    temp1[i] = Arrays.copyOf(game[i], game[i].length);
                }
                game = insert(game, place, value);
                print(game);

                if (!Arrays.deepEquals(temp1, game)) {
                    f = minimax(game, 4, true, true, "■", 0, 0);

                }
            }

        }else if(x==3){  //if he enter 3 we will get values from user white and values fron AI black put it in board and check win
            int f;
            while(true) {
                System.out.println("White turn");
                value = "■";
                print(game);
                place = scanner.next();
                for (int i = 0; i < game.length; i++) {
                    temp1[i] = Arrays.copyOf(game[i], game[i].length);
                }
                game = insert(game, place, value);
                print(game);

                if (!Arrays.deepEquals(temp1, game)) {
                    f = minimax(game, 4, true, true, "□", 0, 0);

                }
            }

        } else if (x==4){
            int i;
            while(true) {
                System.out.println("the turn for ■");
                i = minimax(game, 10, true, true, "■", 0, 0);
                print(game);
                System.out.println("the turn for □");
                i = minimax(game, 1, true, true, "□", 0, 0);
                print(game);
            }

        }

    }
}